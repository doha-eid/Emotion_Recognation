EEG Features Extraction:
preprocess_EEG():
Arguments: raw, features
Description: This function can be used to preprocess EEG data and extract features for use in machine learning or other data analysis tasks.
Steps: 
The function preprocesses EEG data by applying various filtering and spectral analysis techniques and extracts features from the data.
The function applies a bandpass filter to the raw data using the (firwin) function from the signal module of the SciPy library.
The filtered data is then passed through separate bandpass filters for different frequency bands (theta, alpha, and beta) using the same (firwin) function with different frequency ranges.
The (filtfilt) function from the signal module is used to apply zero-phase filtering to the filtered data.
The (signal.welch) function is used to compute the power spectral density (PSD)estimates of the filtered data for each frequency band.
The resulting PSD estimates are stored in variables (psdtheta), (psdalpha), and (psdbeta).
The function calculates the mean of the PSD estimates for each frequency band and appends them to the feature list.
The resulting feature list is returned as the output of the function.

2-	feat_extract_EEG():
Arguments: raw 
Description: This function can be used to extract features from EEG data for each participant and video in the DREAMER dataset, which can then be used for machine learning or other data analysis tasks.
Steps: 
The function creates a 3D numpy array called (EEG_tmp) with dimensions (23, 18, 42) to store the extracted features.
The function loops over each participant, video, and EEG channel and extracts the baseline and stimulus data for that channel using indexing.
The preprocess_EEG() function is called on both the baseline and stimulus data to extract the power spectral density estimates for theta, alpha, and beta frequency bands.
The ratio of the PSD estimates for stimulus and baseline data is then computed and stored in the (EEG_tmp) array at the appropriate location.
After all features have been extracted and stored in (EEG_tmp), the function creates a pandas Data Frame called (data_EEG) to store the features in a tabular format.
The StandardScaler() function from the sklearn module is used to standardize the extracted features, and the resulting standardized features are stored back in the (data_EEG) Data Frame.
The function drops the original unstandardized features from (data_EEG) and returns the resulting Data Frame as the output of the function.

3-	participant_affective():
Arguments: raw
Description: This function can be used to extract participant demographic information and affective labels for each video in the DREAMER dataset, which can then be used for machine learning or other data analysis tasks.
Steps: 
The function creates a 3D numpy array called a with dimensions (23, 18, 9) to store the extracted information.
The function loops over each participant and video and extracts the relevant information from raw using indexing.
The extracted information is stored in the appropriate location in the array.
After all information has been extracted and stored in a, the function creates a pandas Data Frame called b to store the information in a tabular format.
The reshape function is used to convert the 3D array into a 2D numpy array that can be used to create the b Data Frame.
The function renames the columns of the b Data Frame to match the types of information that were extracted.
The resulting Data Frame is returned as the output of the function.

ECG Features Extraction:
statistics_caculation():
Arguments: waves
Description: This function can be used to compute basic statistics for a given set of numerical values, which can be useful for data analysis or machine learning tasks. 
Steps: 
The function computes basic statistics (mean, standard deviation, minimum, maximum, and range) for the input values using functions from the NumPy library.
The nan in (np.nanmean), (np.nanstd), (np.nanmin), and (np.nanmax) allows the functions to handle missing values by treating them as NaN.
The function returns the computed statistics as a tuple in the following order: mean, standard deviation, minimum, maximum, range. 


2-	calculate_static_features():
Arguments: waves1, waves2, waves3, and waves4.
Description: This function can be used to compute basic statistics for multiple sets of numerical values and to compute additional statistics for different parts of the brain. This can be useful for analyzing ECG data or for machine learning tasks that involve ECG features.
Steps: 
The function calls the calculations function to compute additional statistics for the left and right sides of the brain. The calculations function takes 10 arguments, which correspond to the mean, standard deviation, minimum, maximum, and range values for the baseline and stimulus data of the left and right sides of the brain.
The calculations function computes the mean and standard deviation of the baseline and stimulus data for each side of the brain, as well as the difference between the maximum and minimum values (range).
The calculate_static_features() function then computes the mean, standard deviation, minimum, maximum, and range for both sides of the brain by averaging the corresponding values computed by the calculations function.
Finally, the function computes the overall mean, standard deviation, minimum, maximum, and range by averaging the left and right-side values.
The function returns the computed statistics as a tuple in the following order: mean, standard deviation, minimum, maximum, and range.
3-	get_beaks():
Arguments: raw
Description: Function to extract certain features (peaks and baseline/stimulus data) from EEG signals in the raw data.
Steps: 
The function returns four sets of peaks and four sets of baseline/stimulus data, which are assigned to the variables (peaks_bl), (peaks_sl), (peaks_br), (peaks_sr), (basl_left), (stim_left), (basl_right), and (stim_right).
4-	time_domain():
Arguments: raw.
Description: Function to extract time domain features (P, R, and T wave) from ECG signals in the DREAMER dataset.
Steps: 
The function iterates over all participants and videos in the raw data and extracts the baseline and stimuli data for left and right ECG signals.
The function uses functions from the NeuroKit library to extract peaks and delineate waves from the ECG signals for each condition and side of the brain.
The function calls the calculate_static_features() function with the extracted peaks to compute basic statistics (mean, standard deviation, minimum, maximum, and range) for each wave type (P, R, and T) for each side of the brain.
The function stores the computed statistics in separate Data Frames (p_wave_df, r_wave_df, and t_wave_df) for each wave type.
The function concatenates the three Data Frames horizontally using the pd.concat() function and returns the resulting Data Frame as time_ECG.
5-	hrv_features():
Arguments: raw
Description: Function to extract heart rate variability (HRV) features from ECG signals in the DREAMER dataset.
Steps: 
The function iterates over all participants and videos in the raw data and extracts the baseline and stimuli data for left and right ECG signals.
The function uses functions from the (NeuroKit) library to extract peaks and compute HRV features for each condition and side of the brain.
The function computes three types of HRV features for each side of the brain: time domain features, frequency domain features using the "welch" method, and non-linear features.
The function computes the ratio of HRV features between baseline and stimuli conditions for each side of the brain.
The function computes the average of HRV features between left and right sides of the brain.
The function stores the computed features in separate DataFrames (time_ECG, frequency_ECG, and non_linear) for each HRV feature type.
The function concatenates the three DataFrames horizontally using the pd.concat() function and returns the resulting DataFrame as ECG.

 
